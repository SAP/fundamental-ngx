import{a as y}from"./chunk-TMKND3S3.js";import{Ie as C,Ke as E,ka as r,ne as h,oe as l,qa as g,qe as x}from"./chunk-BLG5LVB7.js";import"./chunk-PZ6Z7Q4L.js";import"./chunk-SUZNJTWT.js";import{$b as s,Ka as d,Sb as e,Zc as f,gb as u,ja as m,tb as n,ub as t,vb as i}from"./chunk-24AK6VVW.js";var S=(()=>{class o{constructor(){this.translationCustomizationExampleFiles=[{language:"html",code:r("i18n-translation-customization-example/i18n-translation-customization-example.component.html"),fileName:"i18n-translation-customization-example"},{language:"typescript",component:"PlatformI18nTranslationCustomizationExampleComponent",code:r("i18n-translation-customization-example/i18n-translation-customization-example.component.ts"),fileName:"i18n-translation-customization-example",name:"Host component"},{language:"typescript",component:"TranslationWrapper1Component",code:r("i18n-translation-customization-example/translation-wrapper-1.component.ts"),fileName:"translation-wrapper-1",name:"Wrapper component 1"},{language:"typescript",component:"TranslationWrapper2Component",code:r("i18n-translation-customization-example/translation-wrapper-2.component.ts"),fileName:"translation-wrapper-2",name:"Wrapper component 2"}]}static{this.\u0275fac=function(a){return new(a||o)}}static{this.\u0275cmp=m({type:o,selectors:[["ng-component"]],standalone:!0,features:[s],decls:27,vars:1,consts:[["id","language-customization","componentName","i18n"],[3,"exampleFiles"]],template:function(a,c){a&1&&(n(0,"fd-docs-section-title",0),e(1,` Customizing language per component
`),t(),n(2,"description")(3,"p"),e(4," In order to provide language customizations on a component-by-component basis, use the "),n(5,"code"),e(6,"fdLanguagePatch"),t(),e(7," directive. You will also need to import the "),n(8,"code"),e(9,"@fundamental-ngx/i18n"),t(),e(10," module. "),t(),n(11,"p"),e(12," It is also possible to easily override the global language for a certain component by providing "),n(13,"code"),e(14,"FD_LANGUAGE"),t(),e(15," token at any child scope. Use the "),n(16,"code"),e(17,"patchLanguage"),t(),e(18," utility function for this. "),t(),n(19,"p")(20,"b"),e(21,"Note:"),t(),e(22," you should understand that providing an injection token in a certain module will affect the scope where this module is imported. Thus it's recommended to provide overrides on the level of components or lazy loaded modules. "),t()(),n(23,"component-example"),i(24,"app-i18n-translation-customization-example"),t(),i(25,"code-example",1)(26,"separator")),a&2&&(d(25),u("exampleFiles",c.translationCustomizationExampleFiles))},dependencies:[x,l,C,h,g,y],encapsulation:2,changeDetection:0})}}return o})();var v=(()=>{class o{static{this.\u0275fac=function(a){return new(a||o)}}static{this.\u0275cmp=m({type:o,selectors:[["fd-patching-translations-header"]],standalone:!0,features:[s],decls:8,vars:0,template:function(a,c){a&1&&(n(0,"header"),e(1,"Patching translations"),t(),n(2,"description"),e(3," There are cases when you might want to change the translations under a certain context only, for those cases "),n(4,"code"),e(5,"@fundamental-ngx/i18n"),t(),e(6,` exports helpful functions and directives.
`),t(),i(7,"router-outlet"))},dependencies:[E,l,f],encapsulation:2})}}return o})();var H="patching-translations",I=[{path:"",component:v,data:{primary:!0},children:[{path:"",component:S}]}];export{H as LIBRARY_NAME,I as ROUTES};
