name: on-pull-request-or-push

on:
    pull_request:
    push:
        branches:
            - main
            - tmp_branch_for_automated_release_do_not_use
            - hotfix_tmp_branch_for_automated_release_do_not_use

env:
    NX_BRANCH: ${{ github.event.number }}
    NX_RUN_GROUP: ${{ github.run_id }}
    NX_CLOUD_AUTH_TOKEN: ${{ secrets.NX_CLOUD_AUTH_TOKEN }}

    MOZ_HEALESS: 1

    SAUCE_USERNAME: ${{secrets.SAUCE_USERNAME}}
    SAUCE_ACCESS_KEY: ${{secrets.SAUCE_ACCESS_KEY}}

    FIREBASE_CHANNEL: ${{ fromJSON('["", "live"]')[!github.base_ref] }}
    FIREBASE_SERVICE_ACCOUNT_TOKEN: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_TOKEN }}

    CACHE_NODE_MODULES_PATH: |
        ~/.npm
        node_modules

    NODE_OPTIONS: '--max_old_space_size=4096'
    # publish scripts variables
    TRAVIS_BRANCH: ${{ github.ref }}
    TRAVIS_REPO_SLUG: ${{ github.repository }}
    TRAVIS_BUILD_NUMBER: ${{ github.run_number }}
    GH_NAME: ${{ secrets.GH_NAME }}
    GH_EMAIL: ${{ secrets.GH_EMAIL }}

jobs:
    # one run
    one_run:
        runs-on: ubuntu-latest
        steps:
            - name: Cancel Previous Runs
              uses: styfle/cancel-workflow-action@0.9.0
              with:
                  access_token: ${{ secrets.GITHUB_TOKEN }}

    # install dependencies
    install:
        runs-on: ubuntu-latest
        needs: one_run
        steps:
            - uses: actions/checkout@v2
            - uses: actions/cache@v2
              id: cache
              with:
                  path: ${{ env.CACHE_NODE_MODULES_PATH }}
                  key: node_modules-${{ hashFiles('**/package-lock.json') }}
            - uses: actions/setup-node@v2
              with:
                  node-version: 15.11.0
            - name: install dependencies
              run: npm ci

    # lint commit name
    commit_lint:
        runs-on: ubuntu-latest
        needs: install
        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 0
            - uses: wagoid/commitlint-github-action@v3

    # build core
    build-core:
        needs: install
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - uses: actions/cache@v2
              with:
                  path: ${{ env.CACHE_NODE_MODULES_PATH }}
                  key: node_modules-${{ hashFiles('**/package-lock.json') }}
            - uses: actions/cache@v2
              with:
                  path: dist/libs/core
                  key: dist-core-${{ github.run_id }}
            - run: npx nx build core --configuration production --runner cloud

    # build platform
    build-platform:
        needs: build-core
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - uses: actions/cache@v2
              with:
                  path: ${{ env.CACHE_NODE_MODULES_PATH }}
                  key: node_modules-${{ hashFiles('**/package-lock.json') }}
            - uses: actions/cache@v2
              with:
                  path: dist/libs/core
                  key: dist-core-${{ github.run_id }}
            - uses: actions/cache@v2
              with:
                  path: dist/libs/platform
                  key: dist-platform-${{ github.run_id }}
            - run: npx nx build platform --configuration production --runner cloud

    # build moment-adapter
    build-moment-adapter:
        needs: build-core
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - uses: actions/cache@v2
              with:
                  path: ${{ env.CACHE_NODE_MODULES_PATH }}
                  key: node_modules-${{ hashFiles('**/package-lock.json') }}
            - uses: actions/cache@v2
              with:
                  path: dist/libs/core
                  key: dist-core-${{ github.run_id }}
            - uses: actions/cache@v2
              with:
                  path: dist/libs/platform
                  key: dist-platform-${{ github.run_id }}
            - run: npx nx build moment-adapter --configuration=production --runner cloud

    # build fn
    build-fn:
        needs: build-core
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - uses: actions/cache@v2
              with:
                  path: ${{ env.CACHE_NODE_MODULES_PATH }}
                  key: node_modules-${{ hashFiles('**/package-lock.json') }}
            - uses: actions/cache@v2
              with:
                  path: dist/libs/core
                  key: dist-core-${{ github.run_id }}
            - run: npx nx build fn --configuration=production --runner cloud

    # build docs
    build-docs:
        #    needs: [build-core, build-platform]
        needs: install
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - uses: actions/cache@v2
              with:
                  path: ${{ env.CACHE_NODE_MODULES_PATH }}
                  key: node_modules-${{ hashFiles('**/package-lock.json') }}
            - uses: actions/cache@v2
              with:
                  path: dist/libs/core
                  key: dist-core-${{ github.run_id }}
            - uses: actions/cache@v2
              with:
                  path: dist/libs/platform
                  key: dist-platform-${{ github.run_id }}
            - uses: actions/cache@v2
              with:
                  path: dist/apps/docs
                  key: dist-docs-${{ github.run_id }}
            #      - run: npm run build-docs -- --configuration production --base-href="fundamental-ngx"
            - run: |
                  npm run compile-typedoc-all
                  npm run copy-docs
                  npx nx build docs --base-href="fundamental-ngx" --runner cloud

    # run unit tests core
    unit-test:
        runs-on: ubuntu-latest
        needs: install
        strategy:
            fail-fast: false
            matrix:
                lib: [core, platform, moment-adapter]
        steps:
            - uses: actions/checkout@v2
            - uses: actions/cache@v2
              with:
                  path: ${{ env.CACHE_NODE_MODULES_PATH }}
                  key: node_modules-${{ hashFiles('**/package-lock.json') }}
            - run: npx nx test ${{ matrix.lib }} --watch false --code-coverage true --browsers=ChromeHeadless --runner cloud
            - run: npm run test:coveralls

    # run linting
    linting:
        runs-on: ubuntu-latest
        needs: install
        strategy:
            fail-fast: false
            matrix:
                lib: [core, platform, docs, moment-adapter, fn, components-e2e]
        steps:
            - uses: actions/checkout@v2
            - uses: actions/cache@v2
              with:
                  path: ${{ env.CACHE_NODE_MODULES_PATH }}
                  key: node_modules-${{ hashFiles('**/package-lock.json') }}
            - run: npx nx lint ${{ matrix.lib }} --runner cloud

    # run workspace checks
    check-workspace-config:
        runs-on: ubuntu-latest
        needs: install
        strategy:
            fail-fast: false
        steps:
            - uses: actions/checkout@v2
            - uses: actions/cache@v2
              with:
                  path: ${{ env.CACHE_NODE_MODULES_PATH }}
                  key: node_modules-${{ hashFiles('**/package-lock.json') }}
            - run: npx nx run workspace-tools:test --runner cloud

    # check formatting
    check-format:
        runs-on: ubuntu-latest
        needs: install
        steps:
            - uses: actions/checkout@v2
            - uses: actions/cache@v2
              with:
                  path: ${{ env.CACHE_NODE_MODULES_PATH }}
                  key: node_modules-${{ hashFiles('**/package-lock.json') }}
            - run: git fetch origin main
            - run: npm run format:check -- --base=origin/main --head=HEAD

    # firebase deploy preview
    firebase_preview:
        runs-on: ubuntu-latest
        needs: build-docs
        outputs:
            output_url: ${{ steps.firebase_hosting_preview.outputs.details_url }}
        steps:
            - uses: actions/checkout@v2
            - uses: actions/cache@v2
              with:
                  path: dist/apps/docs
                  key: dist-docs-${{ github.run_id }}
            - uses: FirebaseExtended/action-hosting-deploy@v0
              continue-on-error: true
              id: firebase_hosting_preview
              with:
                  repoToken: '${{ secrets.GITHUB_TOKEN }}'
                  firebaseServiceAccount: '${{ env.FIREBASE_SERVICE_ACCOUNT_TOKEN }}'
                  projectId: fundamental-ngx-gh
                  target: fundamental-ngx-gh
                  channelId: ${{ env.FIREBASE_CHANNEL }}
                  expires: 3d

    # run e2e tests
    e2e_smoke:
        runs-on: ubuntu-latest
        timeout-minutes: 100
        needs: firebase_preview

        strategy:
            # when one test fails, DO NOT cancel the other
            # containers, because this will kill Cypress processes
            # leaving the Dashboard hanging ...
            # https://github.com/cypress-io/github-action/issues/48
            fail-fast: false
            #      max-parallel: 6
            matrix:
                suite: ['suite platformA', 'suite platformB', 'suite platformC', 'suite coreA', 'suite coreB']
        steps:
            - uses: actions/checkout@v2
            - uses: browser-actions/setup-chrome@latest
              with:
                  chrome-version: stable
            - uses: actions/cache@v2
              with:
                  path: ${{ env.CACHE_NODE_MODULES_PATH }}
                  key: node_modules-${{ hashFiles('**/package-lock.json') }}
            - uses: actions/setup-node@v2
              with:
                  node-version: 15.11.0

            - name: smoke e2e on firebase
              env:
                  CAP_SLUG: ${{ matrix.browser }}
              if: ${{ needs.firebase_preview.outputs.output_url }}
              run: |
                  npm rebuild
                  npm ci
                  export DISPLAY=:99
                  chrome --version
                  sudo Xvfb -ac :99 -screen 0 1920x1080x24 > /dev/null 2>&1 & # optional
                  TS_NODE_PROJECT=./e2e/tsconfig.json npx wdio wdio.conf.js --${{ matrix.suite }} --baseUrl=${{ needs.firebase_preview.outputs.output_url }}/fundamental-ngx

            - name: smoke e2e on local
              env:
                  CAP_SLUG: ${{ matrix.browser }}
              if: ${{ !needs.firebase_preview.outputs.output_url }}
              run: |
                  npm rebuild
                  npm ci
                  npx ng serve --watch false --configuration production &
                  npx wait-on http://localhost:4200
                  export DISPLAY=:99
                  chrome --version
                  sudo Xvfb -ac :99 -screen 0 1920x1080x24 > /dev/null 2>&1 & # optional
                  TS_NODE_PROJECT=./e2e/tsconfig.json npx wdio wdio.conf.js --${{ matrix.suite }} --baseUrl="http://localhost:4200/"

    # pre-release to npm
    npm_publish:
        runs-on: ubuntu-latest
        needs: install
        if: ${{ !github.base_ref && (
            github.ref == 'refs/heads/main'
            || github.ref == 'refs/heads/tmp_branch_for_automated_release_do_not_use'
            || github.ref == 'refs/heads/hotfix_tmp_branch_for_automated_release_do_not_use'
            ) }}
        steps:
            - uses: actions/checkout@v2.4.0
              with:
                  token: ${{ secrets.GHACTIONS }}
                  submodules: true
                  fetch-depth: 0
            - uses: actions/cache@v2
              with:
                  path: ${{ env.CACHE_NODE_MODULES_PATH }}
                  key: node_modules-${{ hashFiles('**/package-lock.json') }}

            - run: |
                  echo "STAGE_NAME=Release" >> $GITHUB_ENV
                  git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/*
                  git fetch
                  git checkout tmp_branch_for_automated_release_do_not_use
              if: ${{ github.ref == 'refs/heads/tmp_branch_for_automated_release_do_not_use' }}
            - run: |
                  echo "STAGE_NAME=Pre-release" >> $GITHUB_ENV 
                  echo "releaseTag=prerelease" >> $GITHUB_ENV
                  git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/*
                  git fetch
                  git checkout main
              if: ${{ github.ref == 'refs/heads/main' }}
            - run: |
                  echo "STAGE_NAME=Hotfix-release" >> $GITHUB_ENV
                  git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/*
                  git fetch
                  git checkout hotfix_tmp_branch_for_automated_release_do_not_use
              if: ${{ github.ref == 'refs/heads/hotfix_tmp_branch_for_automated_release_do_not_use' }}
            - run: bash ./ci-scripts/publish.sh
              env:
                  GH_TOKEN: ${{ secrets.GHACTIONS }}
                  GHACTIONS: ${{ secrets.GHACTIONS }}
                  TRAVIS_BUILD_STAGE_NAME: ${{ env.STAGE_NAME }}
              if: ${{ github.ref == 'refs/heads/main'
                  || github.ref == 'refs/heads/tmp_branch_for_automated_release_do_not_use'
                  }}

            - run: bash ./ci-scripts/hotfix-publish.sh
              env:
                  GH_TOKEN: ${{ secrets.GHACTIONS }}
                  TRAVIS_BUILD_STAGE_NAME: ${{ env.STAGE_NAME }}
              if: ${{ github.ref == 'refs/heads/hotfix_tmp_branch_for_automated_release_do_not_use' }}

            - uses: JS-DevTools/npm-publish@v1
              with:
                  package: 'dist/libs/core/package.json'
                  token: ${{ secrets.NPM_TOKEN }}
                  tag: ${{ env.releaseTag }}
            - uses: JS-DevTools/npm-publish@v1
              with:
                  package: 'dist/libs/platform/package.json'
                  token: ${{ secrets.NPM_TOKEN }}
                  tag: ${{ env.releaseTag }}
            - uses: JS-DevTools/npm-publish@v1
              with:
                  package: 'dist/libs/moment-adapter/package.json'
                  token: ${{ secrets.NPM_TOKEN }}
                  tag: ${{ env.releaseTag }}
            - uses: JS-DevTools/npm-publish@v1
              with:
                  package: 'dist/libs/fn/package.json'
                  token: ${{ secrets.NPM_TOKEN }}
                  tag: ${{ env.releaseTag }}
