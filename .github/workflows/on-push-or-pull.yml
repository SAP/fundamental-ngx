name: on-pull-request-or-push

on:
  pull_request:
  push:
    branches:
      - main
      - tmp_branch_for_automated_release_do_not_use
      - hotfix_tmp_branch_for_automated_release_do_not_use

env:
  NX_BRANCH: ${{ github.event.number }}
  NX_RUN_GROUP: ${{ github.run_id }}
  NX_CLOUD_AUTH_TOKEN: ${{ secrets.NX_CLOUD_AUTH_TOKEN }}

  MOZ_HEALESS: 1

  SAUCE_USERNAME: ${{secrets.SAUCE_USERNAME}}
  SAUCE_ACCESS_KEY: ${{secrets.SAUCE_ACCESS_KEY}}


  FIREBASE_CHANNEL: ${{ fromJSON('["", "live"]')[!github.base_ref] }}
  FIREBASE_SERVICE_ACCOUNT_TOKEN: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_TOKEN }}

  CACHE_NODE_MODULES_PATH: |
    ~/.npm
    node_modules

  NODE_OPTIONS: '--max_old_space_size=4096'
# publish scripts variables
  TRAVIS_BRANCH: ${{ github.ref }}
  TRAVIS_REPO_SLUG: ${{ github.repository }}
  TRAVIS_BUILD_NUMBER: ${{ github.run_number }}
  GH_NAME: ${{ secrets.GH_NAME }}
  GH_EMAIL: ${{ secrets.GH_EMAIL }}

jobs:
  # one run
  one_run:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}

  # install dependencies
  install:
    runs-on: ubuntu-latest
    needs: one_run
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        id: cache
        with:
          path: ${{ env.CACHE_NODE_MODULES_PATH }}
          key: node_modules-${{ hashFiles('**/package-lock.json') }}
      - run: npm ci
        if: steps.cache.outputs.cache-hit != 'true'

  # lint commit name
  commit_lint:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v3

  # build core
  build-core:
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_NODE_MODULES_PATH }}
          key: node_modules-${{ hashFiles('**/package-lock.json') }}
      - uses: actions/cache@v2
        with:
          path: dist/libs/core
          key: dist-core-${{ github.run_id }}
      - run: npx nx build core --prod --with-deps --runner cloud

  # build platform
  build-platform:
    needs: build-core
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_NODE_MODULES_PATH }}
          key: node_modules-${{ hashFiles('**/package-lock.json') }}
      - uses: actions/cache@v2
        with:
          path: dist/libs/core
          key: dist-core-${{ github.run_id }}
      - uses: actions/cache@v2
        with:
          path: dist/libs/platform
          key: dist-platform-${{ github.run_id }}
      - run: npx nx build platform --prod --with-deps --runner cloud

  # build moment-adapter
  build-moment-adapter:
    needs: build-core
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_NODE_MODULES_PATH }}
          key: node_modules-${{ hashFiles('**/package-lock.json') }}
      - uses: actions/cache@v2
        with:
          path: dist/libs/core
          key: dist-core-${{ github.run_id }}
      - uses: actions/cache@v2
        with:
          path: dist/libs/platform
          key: dist-platform-${{ github.run_id }}
      - run: npx nx build moment-adapter --configuration=production --with-deps --runner cloud

  # build docs
  build-docs:
#    needs: [build-core, build-platform]
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_NODE_MODULES_PATH }}
          key: node_modules-${{ hashFiles('**/package-lock.json') }}
      - uses: actions/cache@v2
        with:
          path: dist/libs/core
          key: dist-core-${{ github.run_id }}
      - uses: actions/cache@v2
        with:
          path: dist/libs/platform
          key: dist-platform-${{ github.run_id }}
      - uses: actions/cache@v2
        with:
          path: dist/apps/docs
          key: dist-docs-${{ github.run_id }}
#      - run: npm run build-docs -- --prod --base-href="fundamental-ngx"
      - run: |
          npm run compile-typedoc-all
          npm run copy-docs
          npx nx build docs --base-href="fundamental-ngx" --runner cloud

  # run unit tests core
  unit-test:
    runs-on: ubuntu-latest
    needs: install
    strategy:
      fail-fast: false
      matrix:
        lib: [ core, platform, moment-adapter ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_NODE_MODULES_PATH }}
          key: node_modules-${{ hashFiles('**/package-lock.json') }}
      - run: npx nx test ${{ matrix.lib }} --watch false --code-coverage true --browsers=ChromeHeadless --runner cloud
      - run: npm run test:coveralls

  # run linting
  linting:
    runs-on: ubuntu-latest
    needs: install
    strategy:
      fail-fast: false
      matrix:
        lib: [ core, platform, docs, moment-adapter ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_NODE_MODULES_PATH }}
          key: node_modules-${{ hashFiles('**/package-lock.json') }}
      - run: npx nx lint ${{ matrix.lib }} --runner cloud

  # firebase deploy preview
  firebase_preview:
    runs-on: ubuntu-latest
    needs: build-docs
    outputs:
      output_url: ${{ steps.firebase_hosting_preview.outputs.details_url }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: dist/apps/docs
          key: dist-docs-${{ github.run_id }}
      - uses: FirebaseExtended/action-hosting-deploy@v0
        continue-on-error: true
        id: firebase_hosting_preview
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ env.FIREBASE_SERVICE_ACCOUNT_TOKEN }}'
          projectId: fundamental-ngx-gh
          target: fundamental-ngx-gh
          channelId: ${{ env.FIREBASE_CHANNEL }}
          expires: 3d

  # run e2e tests
  e2e_smoke:
    runs-on: ubuntu-latest
    needs: firebase_preview

    strategy:
      # when one test fails, DO NOT cancel the other
      # containers, because this will kill Cypress processes
      # leaving the Dashboard hanging ...
      # https://github.com/cypress-io/github-action/issues/48
      fail-fast: false
#      max-parallel: 6
      matrix:
        suite: ["suite platformA", "suite platformB", "suite coreA", "suite coreB"]
    steps:
      - uses: actions/checkout@v2
      - uses: browser-actions/setup-chrome@latest
        with:
          chrome-version: stable
      - uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_NODE_MODULES_PATH }}
          key: node_modules-${{ hashFiles('**/package-lock.json') }}

      - name: smoke e2e on firebase
        env:
          CAP_SLUG: ${{ matrix.browser }}
        if: ${{ needs.firebase_preview.outputs.output_url }}
        run: |
          export DISPLAY=:99
          chrome --version
          sudo Xvfb -ac :99 -screen 0 1920x1080x24 > /dev/null 2>&1 & # optional
          TS_NODE_PROJECT=./e2e/tsconfig.json npx wdio wdio.conf.js --${{ matrix.suite }} --baseUrl=${{ needs.firebase_preview.outputs.output_url }}/fundamental-ngx

      - name: smoke e2e on local
        env:
          CAP_SLUG: ${{ matrix.browser }}
        if: ${{ !needs.firebase_preview.outputs.output_url }}
        run: |
          npx ng serve --no-watch --aot --prod &
          npx wait-on http://localhost:4200
          export DISPLAY=:99
          chrome --version
          sudo Xvfb -ac :99 -screen 0 1920x1080x24 > /dev/null 2>&1 & # optional
          TS_NODE_PROJECT=./e2e/tsconfig.json npx wdio wdio.conf.js --${{ matrix.suite }} --baseUrl="http://localhost:4200/"


  # pre-release to npm
  npm_publish:
    runs-on: ubuntu-latest
    needs: install
    if: ${{ !github.base_ref && (
      github.ref == 'refs/heads/main'
      || github.ref == 'refs/heads/tmp_branch_for_automated_release_do_not_use'
      || github.ref == 'refs/heads/hotfix_tmp_branch_for_automated_release_do_not_use'
      ) }}
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          token: ${{ secrets.GHACTIONS }}
      - uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_NODE_MODULES_PATH }}
          key: node_modules-${{ hashFiles('**/package-lock.json') }}

      - run: echo "STAGE_NAME=Release" >> $GITHUB_ENV
        if: ${{ github.ref == 'refs/heads/tmp_branch_for_automated_release_do_not_use' }}
      - run: echo "STAGE_NAME=Pre-release" >> $GITHUB_ENV
        if: ${{ github.ref == 'refs/heads/main' }}
      - run: echo "STAGE_NAME=Hotfix-release" >> $GITHUB_ENV
        if: ${{ github.ref == 'refs/heads/hotfix_tmp_branch_for_automated_release_do_not_use' }}

      - run: bash ./ci-scripts/publish.sh
        env:
          GH_TOKEN: ${{ secrets.GHACTIONS }}
          TRAVIS_BUILD_STAGE_NAME: ${{ env.STAGE_NAME }}
        if: ${{ github.ref == 'refs/heads/main'
          || github.ref == 'refs/heads/tmp_branch_for_automated_release_do_not_use'
          }}

      - run: bash ./ci-scripts/hotfix-publish.sh
        env:
          GH_TOKEN: ${{ secrets.GHACTIONS }}
          TRAVIS_BUILD_STAGE_NAME: ${{ env.STAGE_NAME }}
        if: ${{ github.ref == 'refs/heads/hotfix_tmp_branch_for_automated_release_do_not_use' }}

      - uses: JS-DevTools/npm-publish@v1
        with:
          package: "dist/libs/core/package.json"
          token: ${{ secrets.NPM_TOKEN }}
      - uses: JS-DevTools/npm-publish@v1
        with:
          package: "dist/libs/platform/package.json"
          token: ${{ secrets.NPM_TOKEN }}
      - uses: JS-DevTools/npm-publish@v1
        with:
          package: "dist/libs/moment-adapter/package.json"
          token: ${{ secrets.NPM_TOKEN }}
