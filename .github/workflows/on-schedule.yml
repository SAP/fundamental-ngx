name: scheduled-daily-build

on:
  schedule:
    # Cron time is UTC, set to run at 22:00UTC (01:00 EEST)
    - cron: '0 22 * * *'

env:
  NX_BRANCH: ${{ github.event.number }}
  NX_RUN_GROUP: ${{ github.run_id }}
  NX_CLOUD_AUTH_TOKEN: ${{ secrets.NX_CLOUD_AUTH_TOKEN }}

  MOZ_HEALESS: 1

  SAUCE_USERNAME: ${{secrets.SAUCE_USERNAME}}
  SAUCE_ACCESS_KEY: ${{secrets.SAUCE_ACCESS_KEY}}

  FIREBASE_CHANNEL: ${{ fromJSON('["", "live"]')[!github.base_ref] }}
  FIREBASE_SERVICE_ACCOUNT_TOKEN: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_TOKEN }}

  CACHE_NODE_MODULES_PATH: |
    ~/.npm
    node_modules

  NODE_OPTIONS: '--max_old_space_size=4096'

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        id: cache
        with:
          path: ${{ env.CACHE_NODE_MODULES_PATH }}
          key: node_modules-${{ hashFiles('**/package-lock.json') }}
      - run: npm ci
        if: steps.cache.outputs.cache-hit != 'true'

  # build core
  build-core:
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_NODE_MODULES_PATH }}
          key: node_modules-${{ hashFiles('**/package-lock.json') }}
      - uses: actions/cache@v2
        with:
          path: dist/libs/core
          key: dist-core-${{ github.run_id }}
      - run: npx nx build core --prod --with-deps --runner cloud

  # build platform
  build-platform:
    needs: build-core
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_NODE_MODULES_PATH }}
          key: node_modules-${{ hashFiles('**/package-lock.json') }}
      - uses: actions/cache@v2
        with:
          path: dist/libs/core
          key: dist-core-${{ github.run_id }}
      - uses: actions/cache@v2
        with:
          path: dist/libs/platform
          key: dist-platform-${{ github.run_id }}
      - run: npx nx build platform --prod --with-deps --runner cloud

  # build docs
  build-docs:
    needs: [build-core, build-platform]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_NODE_MODULES_PATH }}
          key: node_modules-${{ hashFiles('**/package-lock.json') }}
      - uses: actions/cache@v2
        with:
          path: dist/libs/core
          key: dist-core-${{ github.run_id }}
      - uses: actions/cache@v2
        with:
          path: dist/libs/platform
          key: dist-platform-${{ github.run_id }}
      - uses: actions/cache@v2
        with:
          path: dist/apps/docs
          key: dist-docs-${{ github.run_id }}
      #      - run: npm run build-docs -- --prod --base-href="fundamental-ngx"
      - run: |
          npm run compile-typedoc-all
          npm run copy-docs
          npx nx build docs --base-href="fundamental-ngx" --runner cloud

  # run unit tests core
  unit-test-core:
    runs-on: ubuntu-latest
    needs: build-core
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_NODE_MODULES_PATH }}
          key: node_modules-${{ hashFiles('**/package-lock.json') }}
      - uses: actions/cache@v2
        with:
          path: dist/libs/core
          key: dist-core-${{ github.run_id }}
      - run: npx ng test core --watch false --code-coverage true --browsers=ChromeHeadless
      - run: npm run test:coveralls

  # run unit tests core
  unit-test-platform:
    runs-on: ubuntu-latest
    needs: build-platform
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_NODE_MODULES_PATH }}
          key: node_modules-${{ hashFiles('**/package-lock.json') }}
      - uses: actions/cache@v2
        with:
          path: dist/libs/platform
          key: dist-platform-${{ github.run_id }}
      - run: npx ng test platform --watch false --code-coverage true --browsers=ChromeHeadless
      - run: npm run test:coveralls

  firebase_preview:
    runs-on: ubuntu-latest
    needs: build-docs
    outputs:
      output_url: ${{ steps.firebase_hosting_preview.outputs.details_url }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: dist/apps/docs
          key: dist-docs-${{ github.run_id }}
      - uses: FirebaseExtended/action-hosting-deploy@v0
        continue-on-error: true
        id: firebase_hosting_preview
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ env.FIREBASE_SERVICE_ACCOUNT_TOKEN }}'
          projectId: fundamental-ngx-gh
          target: fundamental-ngx-gh
          channelId: ${{ env.FIREBASE_CHANNEL }}
          expires: 1d

  e2e_smoke:
    runs-on: ubuntu-latest
    needs: firebase_preview

    strategy:
      # when one test fails, DO NOT cancel the other
      # containers, because this will kill Cypress processes
      # leaving the Dashboard hanging ...
      # https://github.com/cypress-io/github-action/issues/48
      fail-fast: false
      matrix:
        suite: [ "suite platformA", "suite platformB", "spec core" ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_NODE_MODULES_PATH }}
          key: node_modules-${{ hashFiles('**/package-lock.json') }}

      - name: smoke e2e on saucelabs with firebase deployment
        env:
          CAP_SLUG: ${{ matrix.browser }}
        if: ${{ needs.firebase_preview.outputs.output_url }}
        run: TS_NODE_PROJECT=./e2e/tsconfig.json npx wdio wdio-cron.conf.js --${{ matrix.suite }} --baseUrl=${{ needs.firebase_preview.outputs.output_url }}/fundamental-ngx
