name: Create release

on:
    workflow_dispatch:
    push:
        branches:
            - main

jobs:
    run-release:
        name: Run release
        runs-on: ubuntu-latest
        steps:
            - name: Fetch from origin repo
              uses: actions/checkout@v3
              with:
                  ref: main # always fetch from main branch
                  fetch-depth: 0
                  token: ${{ secrets.GHACTIONS }}

            - name: Setup Node.js and Cache
              uses: ./.github/actions/nodejs

            - name: Bump Version
              id: bumpVersion
              uses: ./.github/actions/bump-version
              with:
                  isPrerelease: ${{ github.event_name == 'push' }}
                  writeFile: true

            - name: Lint
              run: npm run lint

            - name: Build
              uses: ./.github/actions/build

            - name: Update Changelog
              run: npx conventional-changelog-cli -p angular -i CHANGELOG.md -s

            - name: Publish packages to NPM
              uses: ./.github/actions/npm-publish
              with:
                  packagePaths: '.,dist-common-css,dist-fn,dist-fn-icons,dist-theming'
                  isPrerelease: ${{ steps.bumpVersion.outputs.isPrerelease }}
                  token: ${{ secrets.NPM_TOKEN }}

            - uses: ./.github/actions/set-up-git
              name: Set up git user
              with:
                  name: ${{ secrets.GH_NAME }}
                  email: ${{ secrets.GH_EMAIL }}

            - name: Commit Changes
              run: |
                  git add .
                  git commit -m "chore(release): release v${{ steps.bumpVersion.outputs.newVersion }} [ci skip]" --no-verify
                  git tag -a v${{ steps.bumpVersion.outputs.newVersion }} -m "chore(release): release v${{ steps.bumpVersion.outputs.newVersion }} [ci skip]"
                  git push --follow-tags

            - name: Generate Release Body
              id: generate_body
              uses: ./.github/actions/generate-conventional-release-notes

            - name: Create Release
              uses: ncipollo/release-action@v1.10.0
              with:
                  prerelease: ${{ steps.bumpVersion.outputs.isPrerelease }}
                  tag: v${{ steps.bumpVersion.outputs.newVersion }}
                  body: ${{ steps.generate_body.outputs.generatedReleaseNotes }}
    gh_pages:
        name: Github Pages deploy
        runs-on: ubuntu-latest
        needs: run-release
        if: ${{ github.event_name != 'push' }}
        steps:
            - name: Checkout
              uses: actions/checkout@v3
              with:
                  ref: main # always fetch from main branch
                  token: ${{ secrets.GHACTIONS }}

            - name: Setup Node.js and Cache
              uses: ./.github/actions/nodejs

            - name: Run build prod
              run: yarn run storybook:static

            - name: Publish to gh-pages
              uses: JamesIves/github-pages-deploy-action@v4
              with:
                  folder: storybook-static
                  token: ${{ secrets.GHACTIONS }}
                  repository-name: ${{ github.repository }}

    # pre-release to npm
#  npm_publish:
#    runs-on: ubuntu-latest
#    needs: install
#    if: ${{ !github.base_ref && (
#      github.ref == 'refs/heads/main'
#      || github.ref == 'refs/heads/tmp_branch_for_automated_release_do_not_use'
#      || github.ref == 'refs/heads/hotfix_tmp_branch_for_automated_release_do_not_use'
#      ) }}
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          token: ${{ secrets.GHACTIONS }}
#          submodules: true
#          fetch-depth: 0
#      - uses: ./.github/actions/nodejs
#      - run: |
#          echo "STAGE_NAME=Release" >> $GITHUB_ENV
#          git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/*
#          git fetch
#          git checkout main
#        if: ${{ github.ref == 'refs/heads/tmp_branch_for_automated_release_do_not_use' }}
#      - run: |
#          echo "STAGE_NAME=Pre-release" >> $GITHUB_ENV
#          echo "releaseTag=prerelease" >> $GITHUB_ENV
#          git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/*
#          git fetch
#          git checkout main
#        if: ${{ github.ref == 'refs/heads/main' }}
#      - run: |
#          echo "STAGE_NAME=Hotfix-release" >> $GITHUB_ENV
#          git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/*
#          git fetch
#          git checkout hotfix_tmp_branch_for_automated_release_do_not_use
#        if: ${{ github.ref == 'refs/heads/hotfix_tmp_branch_for_automated_release_do_not_use' }}
#      - run: bash ./ci-scripts/publish.sh
#        env:
#          GH_TOKEN: ${{ secrets.GHACTIONS }}
#          GHACTIONS: ${{ secrets.GHACTIONS }}
#          TRAVIS_BUILD_STAGE_NAME: ${{ env.STAGE_NAME }}
#        if: ${{ github.ref == 'refs/heads/main'
#          || github.ref == 'refs/heads/tmp_branch_for_automated_release_do_not_use'
#          }}
#
#      - run: bash ./ci-scripts/hotfix-publish.sh
#        env:
#          GH_TOKEN: ${{ secrets.GHACTIONS }}
#          TRAVIS_BUILD_STAGE_NAME: ${{ env.STAGE_NAME }}
#        if: ${{ github.ref == 'refs/heads/hotfix_tmp_branch_for_automated_release_do_not_use' }}
#
#      - uses: JS-DevTools/npm-publish@v1
#        with:
#          package: 'dist/libs/core/package.json'
#          token: ${{ secrets.NPM_TOKEN }}
#          tag: ${{ env.releaseTag }}
#      - uses: JS-DevTools/npm-publish@v1
#        with:
#          package: 'dist/libs/platform/package.json'
#          token: ${{ secrets.NPM_TOKEN }}
#          tag: ${{ env.releaseTag }}
#      - uses: JS-DevTools/npm-publish@v1
#        with:
#          package: 'dist/libs/moment-adapter/package.json'
#          token: ${{ secrets.NPM_TOKEN }}
#          tag: ${{ env.releaseTag }}
#      - uses: JS-DevTools/npm-publish@v1
#        with:
#          package: 'dist/libs/datetime-adapter/package.json'
#          token: ${{ secrets.NPM_TOKEN }}
#          tag: ${{ env.releaseTag }}
#      - uses: JS-DevTools/npm-publish@v1
#        with:
#          package: 'dist/libs/fn/package.json'
#          token: ${{ secrets.NPM_TOKEN }}
#          tag: ${{ env.releaseTag }}
#      - uses: JS-DevTools/npm-publish@v1
#        with:
#          package: 'dist/libs/i18n/package.json'
#          token: ${{ secrets.NPM_TOKEN }}
#          tag: ${{ env.releaseTag }}
