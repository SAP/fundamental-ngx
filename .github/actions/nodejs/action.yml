name: Fundamental-ngx action for Node.js
description: Node.js setup cache

inputs:
    node-version:
        description: Node.js version
        required: false
        default: 22.x
    frozen-lockfile:
        description: Install dependencies from lock file
        required: false
        default: 'true'

runs:
    using: composite
    steps:
        - name: Use Node.js ${{ inputs.node-version }}
          uses: actions/setup-node@v4.2.0
          with:
              node-version: ${{ inputs.node-version }}

        - name: Install Corepack
          shell: bash
          run: npm install -g corepack

        - name: Enable Corepack for Yarn 4.6.0
          shell: bash
          run: |
              corepack enable yarn

        - name: Run Yarn
          shell: bash
          run: |
              yarn

        - name: Install Yarn 4.6.0 (if not available)
          shell: bash
          run: |
              if ! yarn --version | grep -q "4.6.0"; then
                npm install -g yarn@4.6.0
              fi

        - name: Print Node.js version
          shell: bash
          run: node --version

        - name: Get yarn cache directory path
          id: yarn-cache-dir-path
          run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
          shell: bash

        - name: Use the global Yarn cache if available
          uses: actions/cache@v4.2.0
          with:
              path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
              key: ${{ runner.os }}-node-${{ inputs.node_version }}-yarn-${{ hashFiles('**/yarn.lock') }}
              restore-keys: |
                  ${{ runner.os }}-node-${{ inputs.node_version }}-yarn-

        - uses: actions/cache@v4.2.0
          id: node_modules
          name: Use project node_modules cache if available
          with:
              path: '**/node_modules/'
              key: ${{ runner.os }}-${{ inputs.node-version }}-node-modules-${{ hashFiles('**/yarn.lock') }}
              restore-keys: |
                  ${{ runner.os }}-${{ inputs.node-version }}-node-modules-

        - name: Install dependencies
          if: inputs.frozen-lockfile != 'true' || steps.node_modules.outputs.cache-hit != 'true'
          run: yarn install ${{ inputs.frozen-lockfile == 'true' && '--frozen-lockfile' || '' }}
          shell: bash

        - name: Output nx build logs
          if: failure()
          run: |
              log_files=$(find /tmp -name '*.log')
              echo "Found log files: $log_files"

              for log_file in $log_files; do
                echo "====== Contents of $log_file ======"
                cat "$log_file"
              done
          shell: bash
